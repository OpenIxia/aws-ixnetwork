{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Stack creating a VPC and launch EC2 instances within it. **WARNING** This template creates Amazon EC2 instances. You will be billed for the AWS resources used if you create a stack from this template. **WARNING** This template creates role for the launching/deleting instances/subnets/interfaces. This role will invoke AWSLambdaBasicExecutionRole, please see AWS Documentation for details on AWSLambdaBasicExecutionRole.",
    "Conditions": {
      "HasAmiIdName": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "AmiIdforDUT"}]}]}
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "NETWORK CONFIGURATION"
                    }
                },
                {
                    "Label": {
                        "default": "VPC Configuration"
                    },
                    "Parameters": [
                        "Username",
                        "Project",
                        "AvailabilityZone",
                        "VPCCIDR",
                        "ManagementNetworkCIDR"
                    ]
                },
                {
                    "Label": {
                        "default": "IXIA-VM Configuration"
                    },
                    "Parameters": [
                        "AmiIdforVMOne",
                        "InstanceTypeforVMOne",
                        "KeyNameforVMOne",
                        "Eth1",
                        "Eth2",
                        "Eth3",
                        "Eth4",
                        "Eth5",
                        "Eth6",
                        "Eth7",
                        "InstanceCount"
                    ]
                },
                {
                    "Label": {
                        "default": "DUT Configuration"
                    },
                    "Parameters": [
                        "AmiIdforDUT",
                        "InstanceTypeforDUT",
                        "KeyNameforDUT",
                        "DUTCount"
                    ]
                },
                {
                    "Label": {
                        "default": "Security-Group Configuration"
                    },
                    "Parameters": [
                        "MySourceIP"
                    ]
                }
            ],
            "ParameterLabels": {
                "AmiIdforDUT": {
                    "default": "AMI-ID for DUT"
                },
                "AmiIdforVMOne": {
                    "default": "AMI-ID for VMOne"
                },
                "DUTCount": {
                    "default": "Instance Count"
                },
                "InstanceCount": {
                    "default": "Instance Count"
                },
                "InstanceTypeforDUT": {
                    "default": "Instance Type"
                },
                "InstanceTypeforVMOne": {
                    "default": "Instance Type"
                },
                "KeyNameforDUT": {
                    "default": "SSH Key"
                },
                "KeyNameforVMOne": {
                    "default": "SSH Key"
                },
                "ManagementNetworkCIDR": {
                    "default": "Management-Network"
                },
                "MySourceIP": {
                    "default": "External-IP"
                },
                "AvailabilityZone": {
                    "default": "Availability Zone"
                },
                "VPCCIDR": {
                "default": "VPC"
                }
            }
        }
    },
    "Parameters": {
        "Eth1": {
            "AllowedPattern": "[(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})]* *",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Default": "10.0.1.0/24",
            "Description": "Subnet CIDR for the connected Interface; Eth1 is compulsory",
            "MaxLength": "18",
            "MinLength": "0",
            "Type": "String"
        },
	    "Eth2": {
            "AllowedPattern": "[(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})]* *",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Default": "10.0.2.0/24",
            "Description": "Subnet CIDR for the connected Interface; Eth2 is compulsory",
            "MaxLength": "18",
            "MinLength": "0",
            "Type": "String"
        },
	    "Eth3": {
            "AllowedPattern": "[(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})]* *",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Default": "",
            "Description": "Subnet CIDR for the connected Interface; NIC won't be created if value is not provided",
            "MaxLength": "18",
            "MinLength": "0",
            "Type": "String"
        },
	    "Eth4": {
            "AllowedPattern": "[(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})]* *",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Default": "",
            "Description": "Subnet CIDR for the connected Interface; NIC won't be created if value is not provided",
            "MaxLength": "18",
            "MinLength": "0",
            "Type": "String"
        },
	    "Eth5": {
            "AllowedPattern": "[(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})]* *",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Default": "",
            "Description": "Subnet CIDR for the connected Interface; NIC won't be created if value is not provided",
            "MaxLength": "18",
            "MinLength": "0",
            "Type": "String"
        },
	    "Eth6": {
           "AllowedPattern": "[(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})]* *",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Default": "",
            "Description": "Subnet CIDR for the connected Interface; NIC won't be created if value is not provided",
            "MaxLength": "18",
            "MinLength": "0",
            "Type": "String"
        },
        "Eth7": {
           "AllowedPattern": "[(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})]* *",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Default": "",
            "Description": "Subnet CIDR for the connected Interface; NIC won't be created if value is not provided",
            "MaxLength": "18",
            "MinLength": "0",
            "Type": "String"
        },
        "AmiIdforDUT": {
            "Default": "",
            "Description": "AMI-ID for DUT",
            "Type": "String"
        },
        "AmiIdforVMOne": {
            "Default": " ",
            "Description": "AMI-ID for the vmone instances",
            "Type": "AWS::EC2::Image::Id"
        },
        "DUTCount": {
            "ConstraintDescription": "Must be a number.",
            "Default": 0,
            "Description": "Number of DUT to be launched. Min-Value=0; Max-Value=20",
            "MaxValue": 20,
            "MinValue": 0,
            "Type": "Number"
        },
        "InstanceCount": {
            "ConstraintDescription": "Must be a number.",
            "Default": 1,
            "Description": "Number of VMOne instances to be launched. Min-Value=1; Max-Value=20",
            "MaxValue": 20,
            "MinValue": 1,
            "Type": "Number"
        },
        "InstanceTypeforDUT": {
            "Default": "c3.8xlarge",
            "Description": "Please select DUT instance type. NOTE::Before selecting, ensure if that instance-type is supported in the selected region.",
            "Type": "String"
        },
        "InstanceTypeforVMOne": {
            "AllowedValues": [
                "t2.micro",
                "t2.medium",
                "m3.xlarge",
                "c3.4xlarge",
                "c4.4xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c4.8xlarge",
                "c3.8xlarge",
                "d2.8xlarge",
                "r3.8xlarge",
                "i2.8xlarge"
            ],
            "Default": "c3.8xlarge",
            "Description": "Please select VMOne instance type. NOTE-1::Before selecting, ensure if that instance-type is supported in the selected region. NOTE-2::If you want to select low-performance single-test-NIC explicitely, select one of the following::t2.micro,t2.medium,m3.xlarge,c3.4xlarge,c4.4xlarge,m4.4xlarge.",
            "Type": "String"
        },
        "KeyNameforDUT": {
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair",
            "Description": "Existing KeyPair to login to the DUT",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "KeyNameforVMOne": {
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair",
            "Default": "ec2-dev-ixl",
            "Description": "Existing KeyPair to login to the VMONE instances",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "ManagementNetworkCIDR": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Default": "10.0.0.0/24",
            "Description": "IP Address range for the Management-Subnet (eth0)",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "Project": {
            "Default": "IxL-AWS",
            "Description": "Enter Project Name",
            "Type": "String"
        },
        "Username": {
            "Default": "UserName",
            "Description": "Enter Team or Individual Name Responsible for the Stack.",
            "Type": "String"
        },
        "MySourceIP": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Description": "IP address range used to SSH and access management GUI on the EC2 instances",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        },
        "AvailabilityZone": {
            "Default": "us-east-1a",
            "Description": "Preferred availability zone",
            "MaxLength": "255",
            "MinLength": "1",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "VPCCIDR": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Default": "10.0.0.0/16",
            "Description": "IP Address range for the VPC",
            "MaxLength": "18",
            "MinLength": "9",
            "Type": "String"
        }
    },
    "Resources": {
        "TestNetwSecurityGroup": {
            "Properties": {
                "GroupDescription": "Allow complete access to test-interfaces",
                "SecurityGroupIngress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "IpProtocol": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    " TestInterfaceSG"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Username",
                        "Value": {
                            "Ref": "Username"
                        }
                    },
                    {
                        "Key": "Project",
                        "Value": {
                            "Ref": "Project"
                        }
                    }
                ]
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "EC2InstanceProfile": {
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "EC2ReadonlyRole"
                    }
                ]
            },
            "Type": "AWS::IAM::InstanceProfile"
        },
        "EC2InstancesFunctionDUT": {
            "Properties": {
                "Handler": "index.lambda_handler",
                "Description": "This Lambda() will create/delete DUT instances",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile":  { "Fn::Join": ["\n", [
								"import boto3",
								"import json",
								"import cfnresponse",
								"import collections ",
								"ec2 = boto3.resource('ec2')",
								"client = boto3.client('ec2')",
            					"def lambda_handler(event, context):",
	    						"  try:",
	    						"      responseData = {}",
	    						"      if event['RequestType'] == 'Create':",
	    						"          dutCount=event['ResourceProperties']['MinCount']",
	    						"          if dutCount == '0':",
	    						"              responseData['DUT_INSTANCE_DETAILS']='None'",
	    						"              responseData['login']='None'",
	    						"          else:",
	    						"              rc = ec2.create_instances(ImageId=event['ResourceProperties']['ImageId'], MinCount=int(event['ResourceProperties']['MinCount']), MaxCount=int(event['ResourceProperties']['MaxCount']), InstanceType=event['ResourceProperties']['InstanceType'], KeyName=event['ResourceProperties']['KeyName'], NetworkInterfaces=[{'AssociatePublicIpAddress': True, 'DeviceIndex': 0, 'Groups': [event['ResourceProperties']['MgmtSecurityGroup']], 'SubnetId': event['ResourceProperties']['publicsubnet']}, ])",
	    						"              for vm  in rc:",
	    						"                   vmdetailmap={}",
	    						"                   vm.wait_until_running();",
	    						"                   id = vm.id",
	    						"                   instance = ec2.Instance(id)",
	    						"                   vmdetailmap['Public_IP']  = instance.public_ip_address,",
	    						"                   vmdetailmap['Eth0']       = instance.private_ip_address,",
	    						"                   tagid='DUT-'+id",
	    						"                   instance.create_tags(Tags=[{'Key': 'Name', 'Value': tagid},{'Key': 'Username', 'Value': event['ResourceProperties']['Username']},{'Key': 'Project', 'Value': event['ResourceProperties']['Project']}, ])",
	    						"                   for i in range(1,3):",
								"                       nicname='Nic'+str(i)",
	    						"                       vpc_subnet = ec2.subnets.filter(Filters=[{'Name': 'vpc-id','Values': [event['ResourceProperties']['vpcid']]}, {'Name': 'cidrBlock','Values': [event['ResourceProperties'][nicname], ]}])",
								"                       for subnet in  vpc_subnet:",        
	    						"                           network_interface = ec2.create_network_interface(Description='F5-DUT-interface', Groups=[event['ResourceProperties']['TestNetwSecurityGrp'],], SubnetId=subnet.id)",
	    						"                       network_interface.modify_attribute(SourceDestCheck={'Value': False})",
	    						"                       netw_interface = ec2.NetworkInterface(network_interface.network_interface_id)",
	    						"                       netw_interface.attach(DeviceIndex=i, InstanceId=id, )",
	    						"                       vmdetailmap['Eth'+str(i)]=netw_interface.private_ip_address",
	    						"              responseData['DUT_INSTANCE_DETAILS']=json.dumps(vmdetailmap)",
	    						"              logincmd = 'ssh -i '+ event['ResourceProperties']['KeyName']+'.pem admin@PublicIp ' ",
	    						"              responseData['login']= logincmd",
	    						"      if event['RequestType'] == 'Delete':",
	    						"          vpc_instances = ec2.instances.filter(Filters=[{'Name': 'vpc-id','Values': [event['ResourceProperties']['vpcid']]}])",
                                "          for instance in vpc_instances:",
                                "              ec2.instances.filter(InstanceIds=[instance.id]).terminate()",
	    						"              instance.wait_until_terminated();",
	    						"          vpc_interfaces = ec2.network_interfaces.filter(Filters=[{'Name': 'vpc-id','Values': [event['ResourceProperties']['vpcid']]}])",
                                "          for interfaces in vpc_interfaces:",
                                "              client.delete_network_interface(NetworkInterfaceId=interfaces.id)",
	    						"          vpc_subnets = ec2.subnets.filter(Filters=[{'Name': 'vpc-id','Values': [event['ResourceProperties']['vpcid']]}])",
                                "          for subnet in vpc_subnets:",
                                "              client.delete_subnet(SubnetId=subnet.id)",
            					"      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, \"CustomResourcePhysicalID\")",
	    						"  except Exception as e:",
            					"      print(e)",
            					"      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, \"CustomResourcePhysicalID\")"
                            ]
                        ]
                    }
                },
                "MemorySize": 1536,
                "Runtime": "python2.7",
                "Timeout": 300
            },
            "Type": "AWS::Lambda::Function"
        },
        "EC2InstancesFunctionVM": {
            "Properties": {
                "Handler": "index.lambda_handler",
                "Description": "This Lambda() will create/delete VMOne instances",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Code": {
                    "ZipFile":  { "Fn::Join": ["\n", [
								"import boto3",
								"import json",
								"import cfnresponse",
								"import collections ",
								"ec2=boto3.resource('ec2')",
            					"def lambda_handler(event,context):",
	    						"  try:",
	    						"      responseData={}",
	    						"      if event['RequestType']=='Create':",
	    						"          vpc=ec2.Vpc(id=event['ResourceProperties']['vpcid'])",
                                "          route_table_iterator=vpc.route_tables.filter(RouteTableIds=[event['ResourceProperties']['PvtRouteTable'],])",
   	    						"          subnetmap={}",
   	    						"          uniquemaps={}",
   	    						"          cidrmap={}",
                                "          for i in range(1,8):",
                                "               key='Nic'+str(i)",
                                "               key2='TestSubnet'+str(i)",
                                "               if event['ResourceProperties'][key]!='':",
                                "                   cidrmap[key2]=event['ResourceProperties'][key]",
                                "                   if(event['ResourceProperties'][key] not in uniquemaps.keys()):",
                                "                        subnet = ec2.create_subnet(CidrBlock=event['ResourceProperties'][key], VpcId=event['ResourceProperties']['vpcid'])",
                                "                        uniquemaps[event['ResourceProperties'][key]]=subnet",
                                "                        subnetmap[key]=subnet",
                                "                        for routetbl in route_table_iterator:",
                                "                          routetbl.associate_with_subnet(SubnetId=subnet.id)",
                                "                   else:",
                                "                     subnetmap[key]=uniquemaps[event['ResourceProperties'][key]]",
                                "               else:",
                                "                 subnetmap[key]=''",
                                "                 cidrmap[key2]='None'",
	    						"          rc=ec2.create_instances(ImageId=event['ResourceProperties']['ImageId'],MinCount=int(event['ResourceProperties']['MinCount']),MaxCount=int(event['ResourceProperties']['MaxCount']),InstanceType=event['ResourceProperties']['InstanceType'],IamInstanceProfile={'Arn': event['ResourceProperties']['IamInstanceProfile']},KeyName=event['ResourceProperties']['KeyName'],NetworkInterfaces=[{'AssociatePublicIpAddress': True,'DeviceIndex':0,'Groups':[event['ResourceProperties']['MgmtSecurityGroup']],'SubnetId':event['ResourceProperties']['publicsubnet']},])",
	    						"          outputmap={}",
	    						"          for vm in rc:",
	    						"               vmdetailmap={}",
	    						"               vm.wait_until_running();",
	    						"               id=vm.id",
	    						"               instance=ec2.Instance(id)",
	    						"               vmdetailmap['Public_IP']=instance.public_ip_address,",
	    						"               vmdetailmap['Eth0']=instance.private_ip_address,",
	    						"               tagid='IXIA-VMONE-'+id",
	    						"               instance.create_tags(Tags=[{'Key':'Name','Value':tagid},{'Key':'Username','Value':event['ResourceProperties']['Username']},{'Key': 'Project','Value':event['ResourceProperties']['Project']},])",
	    						"               i=1",
	    						"               od=collections.OrderedDict(sorted(subnetmap.items()))",
	    						"               for keys in od:",
                                "                   if(od[keys]!=''):",
	    						"                       network_interface=ec2.create_network_interface(Description='IXIA-VMONE-eni',Groups=[event['ResourceProperties']['TestNetwSecurityGrp'],],SubnetId=od[keys].id)",
	    						"                       network_interface.modify_attribute(SourceDestCheck={'Value':False})",
	    						"                       netw_interface=ec2.NetworkInterface(network_interface.network_interface_id)",
	    						"                       netw_interface.attach(DeviceIndex=i,InstanceId=id,)",
	    						"                       vmdetailmap['Eth'+str(i)]=netw_interface.private_ip_address",
	    						"                       i+=1",
	    						"               sortedvmdetailmap=collections.OrderedDict(sorted(vmdetailmap.items()))",
	    						"               outputmap[tagid]=json.dumps(sortedvmdetailmap).replace('\"', \"'\") ",
	    						"          responseData['VMONE_INSTANCE_DETAILS']=json.dumps(outputmap)",
	    						"          responseData.update(cidrmap)",
	    						"          logincmd='ssh -i '+ event['ResourceProperties']['KeyName']+'.pem admin@PublicIp'",
	    						"          responseData['login']=logincmd",
	    						"          vpc_instances=ec2.instances.filter(Filters=[{'Name':'vpc-id','Values':[event['ResourceProperties']['vpcid']]}])",
                                "          for instance in vpc_instances:",
                                "              ec2.instances.filter(InstanceIds=[instance.id]).reboot()",
            					"      cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, \"CustomResourcePhysicalID\")",
	    						"  except Exception as e:",
						        "      print(e)",
            					"      cfnresponse.send(event, context, cfnresponse.FAILED, responseData, \"CustomResourcePhysicalID\")"
                            ]
                        ]
                    }
                },
                "MemorySize": 1536,
                "Runtime": "python2.7",
                "Timeout": 300
            },
            "Type": "AWS::Lambda::Function"
        },
        "EC2ReadonlyRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": "sts:AssumeRole",
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess"
                ],
                "Path": "/"
            },
            "Type": "AWS::IAM::Role"
        },
        "InternetGateway": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "-gateway"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Username",
                        "Value": {
                            "Ref": "Username"
                        }
                    },
                    {
                        "Key": "Project",
                        "Value": {
                            "Ref": "Project"
                        }
                    }
                ]
            },
            "Type": "AWS::EC2::InternetGateway"
        },
        "InternetGatewayAttachment": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                },
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::VPCGatewayAttachment"
        },
        "PrivateRouteTable": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "private-rt"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Username",
                        "Value": {
                            "Ref": "Username"
                        }
                    },
                    {
                        "Key": "Project",
                        "Value": {
                            "Ref": "Project"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "PublicRouteTable": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "-",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "public-rt"
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::RouteTable"
        },
        "LambdaExecutionRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com",
									"ec2.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "ec2:*",
										"iam:PassRole",
                                        "s3:*",
                                        "logs:*"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": "*"
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": "EC2Policy"
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "MgmtInstanceSecurityGroup": {
            "Properties": {
                "GroupDescription": "Allow restricted-access to launched Instances",
                "SecurityGroupEgress": [
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "ICMP",
                        "FromPort": "-1",
                        "IpProtocol": "icmp",
                        "ToPort": "-1"
                    },
					{
                        "CidrIp": "216.176.179.218/32",
                        "Description": "ICMP - AWS-Special(NV)",
                        "FromPort": "-1",
                        "IpProtocol": "icmp",
                        "ToPort": "-1"
                    },
					{
                        "CidrIp": "0.0.0.0/0",
						"Description": "TCP port",
                        "FromPort": "3222",
                        "IpProtocol": "tcp",
                        "ToPort": "3222"
                    },
					{
                        "CidrIp": "216.176.179.218/32",
                        "Description": "TCP port - for IM(NV)",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
					{
                        "CidrIp": "169.254.169.254/32",
                        "Description": "HTTPS port - for IM(NV)",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    },
					{
                        "CidrIp": "54.239.0.0/16",
                        "Description": "HTTPS port - for IM(NV)",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    },
					{
                        "CidrIp": "52.95.0.0/16",
                        "Description": "HTTPS port - for IM(Ohio)",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "SSH port",
                        "FromPort": "22",
                        "IpProtocol": "tcp",
                        "ToPort": "22"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "HTTP port",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
					{
                        "CidrIp": "216.176.179.218/32",
                        "Description": "HTTP port - AWS-Special(NV)",
                        "FromPort": "80",
                        "IpProtocol": "tcp",
                        "ToPort": "80"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "HTTPS port",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    },
					{
                        "CidrIp": "169.254.169.254/32",
                        "Description": "HTTPS port - for IM(NV)",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    },
					{
                        "CidrIp": "54.239.0.0/16",
                        "Description": "HTTPS port - for IM(NV)",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    },
					{
                        "CidrIp": "52.95.0.0/16",
                        "Description": "HTTPS port - for IM(Ohio)",
                        "FromPort": "443",
                        "IpProtocol": "tcp",
                        "ToPort": "443"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "111",
                        "IpProtocol": "tcp",
                        "ToPort": "111"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "2601",
                        "IpProtocol": "tcp",
                        "ToPort": "2601"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "998",
                        "IpProtocol": "tcp",
                        "ToPort": "1000"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "1080",
                        "IpProtocol": "tcp",
                        "ToPort": "1080"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "2345",
                        "IpProtocol": "tcp",
                        "ToPort": "2345"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "3222",
                        "IpProtocol": "tcp",
                        "ToPort": "3222"
                    },
					{
                        "CidrIp": "0.0.0.0/0",
						"Description": "TCP port",
                        "FromPort": "3222",
                        "IpProtocol": "tcp",
                        "ToPort": "3222"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "3601",
                        "IpProtocol": "tcp",
                        "ToPort": "3601"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "4501",
                        "IpProtocol": "tcp",
                        "ToPort": "4502"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "4601",
                        "IpProtocol": "tcp",
                        "ToPort": "4601"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "5285",
                        "IpProtocol": "tcp",
                        "ToPort": "5286"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "5326",
                        "IpProtocol": "tcp",
                        "ToPort": "5327"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "5480",
                        "IpProtocol": "tcp",
                        "ToPort": "5480"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "5488",
                        "IpProtocol": "tcp",
                        "ToPort": "5489"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "6001",
                        "IpProtocol": "tcp",
                        "ToPort": "6005"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "6665",
                        "IpProtocol": "tcp",
                        "ToPort": "6665"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "6967",
                        "IpProtocol": "tcp",
                        "ToPort": "6967"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "6978",
                        "IpProtocol": "tcp",
                        "ToPort": "6978"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "8021",
                        "IpProtocol": "tcp",
                        "ToPort": "8022"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "8881",
                        "IpProtocol": "tcp",
                        "ToPort": "8881"
                    },
					{
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "8890",
                        "IpProtocol": "tcp",
                        "ToPort": "8890"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "8989",
                        "IpProtocol": "tcp",
                        "ToPort": "8990"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "9101",
                        "IpProtocol": "tcp",
                        "ToPort": "9102"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "9613",
                        "IpProtocol": "tcp",
                        "ToPort": "9676"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "10115",
                        "IpProtocol": "tcp",
                        "ToPort": "10116"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "10119",
                        "IpProtocol": "tcp",
                        "ToPort": "10119"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "17662",
                        "IpProtocol": "tcp",
                        "ToPort": "17662"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "17668",
                        "IpProtocol": "tcp",
                        "ToPort": "17777"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "18765",
                        "IpProtocol": "tcp",
                        "ToPort": "18765"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "21123",
                        "IpProtocol": "tcp",
                        "ToPort": "21123"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "TCP port",
                        "FromPort": "21653",
                        "IpProtocol": "tcp",
                        "ToPort": "21653"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "UDP port",
                        "FromPort": "67",
                        "IpProtocol": "udp",
                        "ToPort": "68"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "UDP port",
                        "FromPort": "123",
                        "IpProtocol": "udp",
                        "ToPort": "123"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "UDP port",
                        "FromPort": "161",
                        "IpProtocol": "udp",
                        "ToPort": "162"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "UDP port",
                        "FromPort": "605",
                        "IpProtocol": "udp",
                        "ToPort": "605"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "UDP port",
                        "FromPort": "1000",
                        "IpProtocol": "udp",
                        "ToPort": "1000"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "UDP port",
                        "FromPort": "6004",
                        "IpProtocol": "udp",
                        "ToPort": "6004"
                    },
                    {
                        "CidrIp": {
                            "Ref": "MySourceIP"
                        },
                        "Description": "UDP port",
                        "FromPort": "10116",
                        "IpProtocol": "udp",
                        "ToPort": "10116"
                    },
                    {
                        "CidrIp": "0.0.0.0/0",
                        "Description": "ICMP",
                        "FromPort": "-1",
                        "IpProtocol": "icmp",
                        "ToPort": "-1"
                    },
					{
                        "CidrIp": "216.176.179.218/32",
                        "Description": "ICMP-AWS-Special(NV)",
                        "FromPort": "-1",
                        "IpProtocol": "icmp",
                        "ToPort": "-1"
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    " ManagementInterfaceSG"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Username",
                        "Value": {
                            "Ref": "Username"
                        }
                    },
                    {
                        "Key": "Project",
                        "Value": {
                            "Ref": "Project"
                        }
                    }
                ]
            },
            "Type": "AWS::EC2::SecurityGroup"
        },
        "PrivateNetworkAcl": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    "-private-nacl"
                                ]
                            ]
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::NetworkAcl"
        },
        "StackPublicSubnetA": {
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone"
                },
                "CidrBlock": {
                    "Ref": "ManagementNetworkCIDR"
                },
                "MapPublicIpOnLaunch": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Join": [
                                "",
                                [
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    " public subnet A"
                                ]
                            ]
                        }
                    },
                    {
                        "Key": "Username",
                        "Value": {
                            "Ref": "Username"
                        }
                    },
                    {
                        "Key": "Project",
                        "Value": {
                            "Ref": "Project"
                        }
                    }
                ],
                "VpcId": {
                    "Ref": "VPC"
                }
            },
            "Type": "AWS::EC2::Subnet"
        },
        "PublicSubnetARouteTable": {
            "DependsOn": "StackPublicSubnetA",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                },
                "SubnetId": {
                    "Ref": "StackPublicSubnetA"
                }
            },
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        },
        "PrivateNetworkAclEntryEgress": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "VPCCIDR"
                },
                "Egress": "true",
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "Protocol": -1,
                "RuleAction": "allow",
                "RuleNumber": 200
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "PrivateNetworkAclEntryIngress": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "VPCCIDR"
                },
                "Egress": "false",
                "NetworkAclId": {
                    "Ref": "PrivateNetworkAcl"
                },
                "Protocol": -1,
                "RuleAction": "allow",
                "RuleNumber": 200
            },
            "Type": "AWS::EC2::NetworkAclEntry"
        },
        "RouteToInternet": {
            "DependsOn": "InternetGatewayAttachment",

            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                },
                "RouteTableId": {
                    "Ref": "PublicRouteTable"
                }
            },
            "Type": "AWS::EC2::Route"
        },
            "DUTInstance": {
               "DependsOn": ["RouteToInternet","PrivateNetworkAclEntryIngress","MgmtInstanceSecurityGroup","TestNetwSecurityGroup","PrivateRouteTable","PublicRouteTable","PrivateNetworkAcl","VMOneInstance"],
               "Properties": {
                "ImageId":  {"Fn::If": ["HasAmiIdName", {"Ref": "AmiIdforDUT"}, {"Ref": "AWS::NoValue"}]},
                "InstanceType": {
                    "Ref": "InstanceTypeforDUT"
                },
                "KeyName": {
                    "Ref": "KeyNameforDUT"
                },
                "MaxCount": {
                    "Ref": "DUTCount"
                },
                "MinCount": {
                    "Ref": "DUTCount"
                },
                "publicsubnet": {
                    "Ref": "StackPublicSubnetA"
                },
               "Nic1": {
                    "Ref": "Eth1"
                },
                "Nic2": {
                    "Ref": "Eth2"
                },

                "PvtNetworkAclEntryEgress": {
                    "Ref": "PrivateNetworkAclEntryEgress"
                },

                "PvtNetworkAclEntryIngress": {
                    "Ref": "PrivateNetworkAclEntryIngress"
                },
                "MgmtSecurityGroup": {
                    "Ref": "MgmtInstanceSecurityGroup"
                },
                "TestNetwSecurityGrp": {
                    "Ref": "TestNetwSecurityGroup"
                },
                "IntGateway": {
                    "Ref": "InternetGateway"
                },
                "PvtRouteTable": {
                    "Ref": "PrivateRouteTable"
                },
                "PbRouteTable": {
                    "Ref": "PublicRouteTable"
                },
                "PvtNetworkAcl": {
                    "Ref": "PrivateNetworkAcl"
                },
                "Username": {
                    "Ref": "Username"
                },
                "Project": {
                    "Ref": "Project"
                },
                "vpcid": {
                    "Ref": "VPC"
                },
                "vpccidr": {
                    "Ref": "VPCCIDR"
                },
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "EC2InstancesFunctionDUT",
                        "Arn"
                    ]
                }
            },
            "Type": "AWS::CloudFormation::CustomResource"
        },
            "VMOneInstance": {
               "DependsOn": ["RouteToInternet","PrivateNetworkAclEntryIngress","MgmtInstanceSecurityGroup","TestNetwSecurityGroup","PrivateRouteTable","PublicRouteTable","PrivateNetworkAcl"],
               "Properties": {
                "IamInstanceProfile": {
                    "Fn::GetAtt": [
                        "EC2InstanceProfile",
                        "Arn"
                    ]
                },
                "ImageId": {
                    "Ref": "AmiIdforVMOne"
                },
                "InstanceType": {
                    "Ref": "InstanceTypeforVMOne"
                },
                "KeyName": {
                    "Ref": "KeyNameforVMOne"
                },
                "MaxCount": {
                    "Ref": "InstanceCount"
                },
                "MinCount": {
                    "Ref": "InstanceCount"
                },
                "publicsubnet": {
                    "Ref": "StackPublicSubnetA"
                },
               "Nic1": {
                    "Ref": "Eth1"
                },
                "Nic2": {
                    "Ref": "Eth2"
                },
                "Nic3": {
                    "Ref": "Eth3"
                },
                "Nic4": {
                    "Ref": "Eth4"
                },
                "Nic5": {
                    "Ref": "Eth5"
                },
                "Nic6": {
                    "Ref": "Eth6"
                },
                "Nic7": {
                    "Ref": "Eth7"
                },
                "PvtNetworkAclEntryEgress": {
                    "Ref": "PrivateNetworkAclEntryEgress"
                },
                "PvtNetworkAclEntryIngress": {
                    "Ref": "PrivateNetworkAclEntryIngress"
                },
                "MgmtSecurityGroup": {
                    "Ref": "MgmtInstanceSecurityGroup"
                },
                "TestNetwSecurityGrp": {
                    "Ref": "TestNetwSecurityGroup"
                },
                "IntGateway": {
                    "Ref": "InternetGateway"
                },
                "PvtRouteTable": {
                    "Ref": "PrivateRouteTable"
                },
                "PbRouteTable": {
                    "Ref": "PublicRouteTable"
                },
                "PvtNetworkAcl": {
                    "Ref": "PrivateNetworkAcl"
                },
                "Username": {
                    "Ref": "Username"
                },
                "Project": {
                    "Ref": "Project"
                },
                "vpcid": {
                    "Ref": "VPC"
                },
                "vpccidr": {
                    "Ref": "VPCCIDR"
                },
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "EC2InstancesFunctionVM",
                        "Arn"
                    ]
                }
            },
            "Type": "AWS::CloudFormation::CustomResource"
        },
            "VPC": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "VPCCIDR"
                },
                "EnableDnsHostnames": "true",
                "EnableDnsSupport": "true",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "AWS::StackName"
                        }
                    },
                    {
                        "Key": "Username",
                        "Value": {
                            "Ref": "Username"
                        }
                    },
                    {
                        "Key": "Project",
                        "Value": {
                            "Ref": "Project"
                        }
                    }
                ]
            },
            "Type": "AWS::EC2::VPC"
        },
        "VPCxDhcpOptions": {
            "Type": "AWS::EC2::DHCPOptions",
            "Properties": {
                "DomainName": "VPCxDhcpOptions",
                "DomainNameServers": [
                    "8.8.8.8",
                    "8.8.4.4",
                    "AmazonProvidedDNS"
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "IxLVPCx"
                    },
                    {
                        "Key": "Username",
                        "Value": {
                            "Ref": "Username"
                        }
                    },
                    {
                        "Key": "Project",
                        "Value": {
                            "Ref": "Project"
                        }
                    }
                ]
            }
        },
        "DhcpOptionsAssociation": {
            "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "DhcpOptionsId": {
                    "Ref": "VPCxDhcpOptions"
                }
            }
        }
    },
     "Outputs":{
         "StackVPC": {
            "Description": "VPC ID",
            "Value": { "Ref" : "VPC" },
            "Export" : { "Name" : {"Fn::Sub": "${AWS::StackName}-VPCID" } }
         },
         "VPCCIDR": {
            "Description": "VPC CIDR",
            "Value": { "Ref" : "VPCCIDR" }
         },
         "ManagementNetworkCIDR": {
            "Description": "Management Network CIDR",
            "Value": { "Ref" : "ManagementNetworkCIDR" }
         },
		 "ManagementNetworkSubnet": {
            "Description": "Management Interface Subnet",
            "Value": { "Ref" : "StackPublicSubnetA" }
         },
         "PublicRoutingTable": {
            "Description": "Public Routing Table",
            "Value": {"Ref": "PublicRouteTable"}
         },
         "PrivateRoutingTable": {
            "Description": "Private Routing Table",
            "Value": {"Ref": "PrivateRouteTable"}
         },
         "SecurityGroupManagementInterface": {
            "Description": "Management Interface Security Group",
            "Value": {"Ref": "MgmtInstanceSecurityGroup"}
         },
         "SecurityGroupTestInterface": {
            "Description": "Test Interface Security Group",
            "Value": {"Ref": "TestNetwSecurityGroup"}
         },
         "DUTINSTANCEDETAILS" : {
            "Description" : "DUT instance details",
            "Value" : { "Fn::GetAtt": [ "DUTInstance", "DUT_INSTANCE_DETAILS" ] }
         },
         "VMONEINSTANCEDETAILS" : {
            "Description" : "vmone instance details",
            "Value" : { "Fn::GetAtt": [ "VMOneInstance", "VMONE_INSTANCE_DETAILS" ] }
         },
         "TestSubnet1": {
            "Description": "Test Subnet-1",
            "Value" : { "Fn::GetAtt": [ "VMOneInstance", "TestSubnet1" ] }
         },
         "TestSubnet2": {
            "Description": "Test Subnet-2",
            "Value" : { "Fn::GetAtt": [ "VMOneInstance", "TestSubnet2" ] }
         },
         "TestSubnet3": {
            "Description": "Test Subnet-3",
            "Value" : { "Fn::GetAtt": [ "VMOneInstance", "TestSubnet3" ] }
         },
         "TestSubnet4": {
            "Description": "Test Subnet-4",
            "Value" : { "Fn::GetAtt": [ "VMOneInstance", "TestSubnet4" ] }
         },
         "TestSubnet5": {
            "Description": "Test Subnet-5",
            "Value" : { "Fn::GetAtt": [ "VMOneInstance", "TestSubnet5" ] }
         },
         "TestSubnet6": {
            "Description": "Test Subnet-6",
            "Value" : { "Fn::GetAtt": [ "VMOneInstance", "TestSubnet6" ] }
         },
         "TestSubnet7": {
            "Description": "Test Subnet-7",
            "Value" : { "Fn::GetAtt": [ "VMOneInstance", "TestSubnet7" ] }
         },
         "SSHLoginToDUTInstanceCMD": {
            "Description": "ssh command syntax to login to DUT instance",
            "Value" : { "Fn::GetAtt": [ "DUTInstance", "login" ] }
         },
         "SSHLoginToVmoneInstanceCMD": {
            "Description": "ssh command syntax to login to vmone instance",
            "Value" : { "Fn::GetAtt": [ "VMOneInstance", "login" ] }
         }
  }
}
